<!-- // views/schedules/generate.ejs - Formulário para gerar calendário -->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <%- include('../partials/header') %>
  <title>CuidarJuntos - Gerar Rodízio</title>
  <style>
    .caregiver-draggable {
      cursor: move;
      padding: 10px;
      margin-bottom: 5px;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    .caregiver-draggable:hover {
      background-color: #e9ecef;
    }
    .caregiver-draggable.dragging {
      opacity: 0.5;
      background-color: #d1ecf1;
    }
    .caregiver-order-container {
      min-height: 200px;
      padding: 15px;
      border: 2px dashed #dee2e6;
      border-radius: 5px;
      background-color: #f8f9fa;
    }
    .draggable-placeholder {
      height: 42px;
      margin-bottom: 5px;
      background-color: #e9ecef;
      border: 1px dashed #adb5bd;
      border-radius: 4px;
    }
    .order-number {
      display: inline-block;
      width: 24px;
      height: 24px;
      line-height: 24px;
      text-align: center;
      background-color: #6c757d;
      color: white;
      border-radius: 50%;
      margin-right: 10px;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
      <a class="navbar-brand" href="/">CuidarJuntos</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="/">Início</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/cuidadores">Cuidadores</a>
          </li>
          <li class="nav-item active">
            <a class="nav-link" href="/calendario">Calendário</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container mt-4">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Início</a></li>
        <li class="breadcrumb-item"><a href="/calendario">Calendário</a></li>
        <li class="breadcrumb-item active">Gerar Rodízio</li>
      </ol>
    </nav>

    <div class="card">
      <div class="card-header">
        <h2>Gerar Calendário de Rodízio</h2>
      </div>
      <div class="card-body">
        <% if (caregivers.length < 2) { %>
          <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i> É necessário ter pelo menos 2 cuidadores ativos para gerar um rodízio.
            <a href="/cuidadores/novo" class="btn btn-sm btn-outline-primary ml-2">Adicionar Cuidador</a>
          </div>
        <% } else { %>
          <div class="alert alert-info">
            <p>
              <i class="fas fa-info-circle"></i> O sistema gerará automaticamente o rodízio de cuidadores seguindo o padrão:
            </p>
            <ul>
              <li>Segunda e Terça: Primeiro cuidador</li>
              <li>Quarta e Quinta: Segundo cuidador</li>
              <li>Sexta, Sábado e Domingo: Terceiro cuidador</li>
            </ul>
            <p>O ciclo se repete para garantir que todos os cuidadores participem de todos os dias da semana ao longo do tempo.</p>
          </div>
          
          <form action="/calendario/gerar" method="POST">
            <div class="form-row">
              <div class="form-group col-md-6">
                <label for="startDate">Data de Início</label>
                <input type="date" class="form-control" id="startDate" name="startDate" required value="<%= moment().format('YYYY-MM-DD') %>">
              </div>
              <div class="form-group col-md-6">
                <label for="endDate">Data Final</label>
                <input type="date" class="form-control" id="endDate" name="endDate" required value="<%= moment().add(3, 'months').format('YYYY-MM-DD') %>">
              </div>
            </div>
            
            <div class="form-group">
              <label><i class="fas fa-sort"></i> Ordem dos Cuidadores:</label>
              <p class="text-muted small">Arraste os cuidadores para definir a ordem em que eles aparecerão no rodízio. O primeiro da lista será o primeiro cuidador no calendário.</p>
              
              <div class="caregiver-order-container" id="caregiverOrderContainer">
                <% caregivers.forEach((caregiver, index) => { %>
                  <div class="caregiver-draggable d-flex align-items-center" draggable="true" data-id="<%= caregiver.id %>">
                    <span class="order-number"><%= index + 1 %></span>
                    <div>
                      <strong><%= caregiver.name %></strong>
                      <% if (caregiver.phone) { %>
                        <small class="text-muted d-block"><%= caregiver.phone %></small>
                      <% } %>
                    </div>
                  </div>
                <% }); %>
              </div>
              
              <!-- Campo oculto para armazenar a ordem dos cuidadores -->
              <input type="hidden" name="caregiverOrder" id="caregiverOrderInput">
            </div>
            
            <div class="alert alert-warning mt-3">
              <i class="fas fa-info-circle"></i> Dica: A ordem que você definir determinará como os cuidadores serão alocados nos dias da semana. Por exemplo, se Maria estiver em primeiro lugar, ela será a primeira a cuidar nas segundas e terças.
            </div>
            
            <div class="form-group text-right">
              <a href="/calendario" class="btn btn-secondary">Cancelar</a>
              <button type="submit" class="btn btn-primary">Gerar Calendário</button>
            </div>
          </form>
        <% } %>
      </div>
    </div>
  </div>

  <%- include('../partials/footer') %>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const caregiverOrderContainer = document.getElementById('caregiverOrderContainer');
      const caregiverOrderInput = document.getElementById('caregiverOrderInput');
      const draggables = document.querySelectorAll('.caregiver-draggable');
      
      // Função para atualizar o campo oculto com a ordem dos cuidadores
      function updateCaregiverOrder() {
        const orderedIds = [];
        const caregivers = caregiverOrderContainer.querySelectorAll('.caregiver-draggable');
        
        caregivers.forEach((caregiver, index) => {
          // Atualiza o número de ordem
          const orderSpan = caregiver.querySelector('.order-number');
          orderSpan.textContent = index + 1;
          
          // Adiciona o ID ao array
          orderedIds.push(caregiver.dataset.id);
        });
        
        // Atualiza o campo oculto
        caregiverOrderInput.value = orderedIds.join(',');
      }
      
      // Inicializa o campo oculto
      updateCaregiverOrder();
      
      // Configura os eventos de drag and drop
      draggables.forEach(draggable => {
        draggable.addEventListener('dragstart', () => {
          draggable.classList.add('dragging');
        });
        
        draggable.addEventListener('dragend', () => {
          draggable.classList.remove('dragging');
          updateCaregiverOrder();
        });
      });
      
      caregiverOrderContainer.addEventListener('dragover', e => {
        e.preventDefault();
        const afterElement = getDragAfterElement(caregiverOrderContainer, e.clientY);
        const dragging = document.querySelector('.dragging');
        
        if (afterElement == null) {
          caregiverOrderContainer.appendChild(dragging);
        } else {
          caregiverOrderContainer.insertBefore(dragging, afterElement);
        }
      });
      
      function getDragAfterElement(container, y) {
        const draggableElements = [...container.querySelectorAll('.caregiver-draggable:not(.dragging)')];
        
        return draggableElements.reduce((closest, child) => {
          const box = child.getBoundingClientRect();
          const offset = y - box.top - box.height / 2;
          
          if (offset < 0 && offset > closest.offset) {
            return { offset: offset, element: child };
          } else {
            return closest;
          }
        }, { offset: Number.NEGATIVE_INFINITY }).element;
      }
    });
  </script>
</body>
</html>
